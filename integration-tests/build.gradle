plugins {
    id "eu.xenit.docker-alfresco" version "5.3.2" apply false
}

apply plugin: 'java'

ext {
    slf4jVersion = '1.7.25'
}

dependencies {
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.rest-assured:rest-assured:3.0.7'

    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"
}

// Tests should be executed in child projects, not in this project:
test.enabled = false

configure(subprojects.findAll { it.name.startsWith("alfresco-") }) {

    apply plugin: 'java'

    if (project.name.contains("enterprise") && !project.hasProperty("enterprise")) {
        return
    }
    
    repositories {
        maven {
            name 'release'
            url "https://artifactory.xenit.eu/artifactory/libs-release"
            credentials {
                username project.hasProperty('eu.xenit.artifactory.username') ? property('eu.xenit.artifactory.username') : ''
                password project.hasProperty('eu.xenit.artifactory.password') ? property('eu.xenit.artifactory.password') : ''
            }
        }
    }

    def alfrescoVersion = project.name[-2..-1]

    if (new File("${project.projectDir}/overload.gradle").exists())
        apply from: "${project.projectDir}/overload.gradle"

    task integrationTest(type: Test) {
        testClassesDirs = project.parent.sourceSets.test.output.classesDirs
        classpath = project.parent.sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }

        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }

    check.dependsOn integrationTest

    apply plugin: 'eu.xenit.docker-alfresco'
    apply plugin: 'eu.xenit.docker-compose.auto'

    dependencies {
        if (project.hasProperty("alfrescoBaseWarBom")) {
            baseAlfrescoWar platform("${alfrescoBaseWarBom}")
        }
        baseAlfrescoWar "${alfrescoBaseWar}"
        alfrescoAmp project(path: ":alfresco-dynamic-extensions-repo:alfresco-dynamic-extensions-repo-${alfrescoVersion}", configuration: 'ampArtifact')

        if ("61" == "${alfrescoVersion}" || "62" == "${alfrescoVersion}") {
            // Workaround for https://issues.alfresco.com/jira/browse/MNT-20557
            alfrescoAmp "eu.xenit.alfresco:alfresco-hotfix-MNT-20557:1.0.2@amp"
        }

        alfrescoDE project(':integration-tests:test-bundle')
    }
    
    dockerAlfresco {
        baseImage = "${alfrescoBaseImage}"
        
        leanImage = true
        
        dockerBuild {
            automaticTags = false
        }
    }

    def issue_297_config = project.getName().contains("-6")
            ? "github-issue-297-6.x-application-context.xml"
            : "github-issue-297-5.x-application-context.xml"

    createDockerFile {
        // Workaround for https://issues.alfresco.com/jira/browse/MNT-20007
//        runCommand("sed -i 's|<secure>true</secure>|<secure>false</secure>|g' /usr/local/tomcat/conf/web.xml")
        smartCopy(
                "${project.getParent().getProjectDir()}/src/test/resources/${issue_297_config}",
                "/usr/local/tomcat/shared/classes/alfresco/extension/${issue_297_config}"
        )
    }

    dockerCompose {
        projectName = "alfresco-dynamic-extensions-${project.name}"
        useComposeFiles = [project.parent.projectDir.toString() + '/src/test/compose/docker-compose.yml']
        if (("${alfrescoVersion}" as int) >= 61) {
            useComposeFiles += project.parent.projectDir.toString() + '/src/test/compose/docker-compose-activemq.yml'
        }

        removeVolumes = true
        captureContainersOutput = true

        // Uncomment for quick iterations when developing integration tests
        // stopContainers = false

        // expose alfresco/inflow on a random port, comment to use default port (8080)
        environment.put 'ALFRESCO_TCP_80', '80'
        environment.put 'POSTGRES_IMAGE', "${project.ext.postgresImage}"

        isRequiredBy(project.tasks.integrationTest)
    }
}
