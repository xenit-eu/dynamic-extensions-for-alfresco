subprojects { Project p ->
    apply plugin: "java"
    apply plugin: 'biz.aQute.bnd.builder'
    apply from: "${p.getProjectDir()}/override.gradle"

    configurations {
        testImplementation.extendsFrom(compileOnly)
    }

    jar {
        bnd(
                'Bundle-SymbolicName': p.group+'.'+p.name,
                'Fragment-Host': 'org.eclipse.gemini.blueprint.extender',
                'DynamicImport-Package': '*',
                'Export-Package': 'com.github.dynamicextensionsalfresco.blueprint, com.github.dynamicextensionsalfresco.blueprint.*',
                'Import-Package':
                        // We remove version dependencies on some gemini blueprint packages here,
                        // because they are different for alfresco 5.x and 6.x (see geminiVersion in the root build.gradle)
                        // This bundle is shared between those versions, and it should always be able to find some version to import.
                        'org.eclipse.gemini.blueprint.context;version=!,' +
                        'org.eclipse.gemini.blueprint.context.support;version=!,' +
                        'org.eclipse.gemini.blueprint.service.exporter.support;version=!,' +
                        'org.slf4j;version="[1.7.2,2.1)", ' +
                                '*',
                'Bundle-DocURL': 'https://github.com/xenit-eu/dynamic-extensions-for-alfresco',
        )
    }

    p.sourceSets.main.java.srcDirs = [
            "${p.getProjectDir()}/src/main/java/",
            "${p.getParent().getProjectDir()}/src/main/java/"
    ]
    p.sourceSets.main.resources.srcDirs = [
            "${p.getProjectDir()}/src/main/resources/",
            "${p.getParent().getProjectDir()}/src/main/resources/"
    ]
    p.sourceSets.test.java.srcDirs = [
            "${p.getProjectDir()}/src/test/java/",
            "${p.getParent().getProjectDir()}/src/test/java/"
    ]
    p.sourceSets.test.resources.srcDirs = [
            "${p.getProjectDir()}/src/test/resources/",
            "${p.getParent().getProjectDir()}/src/test/resources/"
    ]

    p.dependencies {
        compileOnly(enforcedPlatform("eu.xenit.alfresco:alfresco-community-bom:${p.ext.springSpecificAlfrescoBom}"))
        testImplementation(enforcedPlatform("eu.xenit.alfresco:alfresco-community-bom:${p.ext.springSpecificAlfrescoBom}"))
        implementation(project(":event-bus"))
        implementation(project(":alfresco-integration"))
        implementation(project(":annotations-runtime"))
        implementation(project(':annotations-runtime:scheduler-quartz-2'))

        compileOnly("org.alfresco.surf:spring-webscripts")
        compileOnly("org.alfresco:alfresco-repository")
        compileOnly("org.osgi:org.osgi.core:${p.ext.osgiVersion}")
        compileOnly("org.eclipse.gemini.blueprint:gemini-blueprint-extender:${p.ext.geminiVersion}") {
            exclude group: "org.springframework"
            exclude group: "org.apache.servicemix.bundles"
        }
        compileOnly("javax.servlet:servlet-api:${p.ext.servletVersion}")
        compileOnly "javax.validation:validation-api:$javax_annotations_version"
        compileOnly("com.springsource.util:com.springsource.util.osgi:${p.ext.springOsgiUtilVersion}")
        compileOnly('org.springframework:spring-core') { transitive = false }
        compileOnly('org.springframework:spring-beans') { transitive = false }
        compileOnly('org.springframework:spring-context') { transitive = false }
        compileOnly('org.springframework:spring-context-support') { transitive = false }

        testImplementation('org.hamcrest:hamcrest-all:1.3')
        testImplementation("org.mockito:mockito-core:${p.ext.mockitoVersion}")
        testImplementation("junit:junit:${p.ext.junitVersion}")
        testImplementation("org.mockito:mockito-core:${mockitoVersion}")
        testImplementation("junit:junit:${junitVersion}")
        testImplementation("org.alfresco:alfresco-repository")
    }
}
