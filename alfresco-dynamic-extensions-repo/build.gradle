subprojects {
    apply plugin: 'base'

    group "eu.xenit"

    configurations {
        ampArtifact
        ampLib
        compileOnly.extendsFrom(ampLib)
        testCompile.extendsFrom(compileOnly)
        blueprint {
            transitive = false
        }
        bundles
    }

    dependencies {
        compileOnly "${project.ext.alfrescoBom}"

        ampLib(project(":alfresco-integration")) {
            transitive = false
        }
        ampLib(project(':annotations')) { transitive = false }
        ampLib(project(":annotations-runtime")) {
            transitive = false
        }
        ampLib(project(":annotations-runtime:scheduler-quartz-2")) { transitive = false }

        ampLib(project(":webscripts")) { transitive = false }

        ampLib("org.apache.felix:org.apache.felix.framework:${project.ext.felixVersion}") { transitive = false }
        ampLib "com.springsource.util:com.springsource.util.osgi:${project.ext.springOsgiUtilVersion}"
        // The core asm library is already included in Alfresco distributions, so we just add asm-commons.
        ampLib("asm:asm-commons:3.1") { transitive = false }
        ampLib "javax.validation:validation-api:$javax_annotations_version"

        ampLib "biz.aQute.bnd:biz.aQute.bnd:${project.ext.bndVersion}"


        blueprint(project(path: ":blueprint-override", configuration: "patchBlueprint${project.ext.geminiVersion.substring(0, 1)}"))


        blueprint(project(":blueprint-integration:blueprint-integration-spring-5"))


        PrintWriter writer = null;
        writer.println("project name: " + project.name);
        if (project.name.matches("alfresco-dynamic-extensions-repo-7\\d*")) {
            ampLib project(':webscripts:webscripts-70')
        } else {
            ampLib project(':webscripts:webscripts-50')
        }

        blueprint("org.eclipse.gemini.blueprint:gemini-blueprint-core:${project.ext.geminiVersion}")
        blueprint("org.eclipse.gemini.blueprint:gemini-blueprint-io:${project.ext.geminiVersion}")

        bundles(project(":control-panel")) { transitive = false }
        bundles(project(":event-bus")) { transitive = false }
    }

    def ampConfig = {
        from(configurations.blueprint) {
            into("config/alfresco/module/$project.parent.name/blueprint-bundles/")
        }

        from(configurations.bundles) {
            into("config/alfresco/module/$project.parent.name/standard-bundles")
        }

        from(configurations.ampLib) {
            into("lib")
        }

        from("${project.projectDir}/module.properties") {
            expand(project.properties)
        }

        from("${project.parent.projectDir}/shared/src/main/resources") {
            into("config")
        }

        from("${project.parent.projectDir}/shared/src/main/config") {
            into("config/alfresco/module/$project.parent.name")
        }

        extension "amp"
        destinationDir = file("$buildDir/amps")
    }

    task amp(type: Zip) {
        configure ampConfig
        baseName = project.name
    }

    artifacts {
        ampArtifact amp
    }

    build.dependsOn("amp")

    apply from: "${rootProject.projectDir}/publish.gradle"

    publishing {
        publications {
            mavenAmp(MavenPublication) {
                artifact amp
            }
        }
    }
}
